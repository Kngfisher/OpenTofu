spec:
  inputs:
    # Stages
    stage_validate:
      default: 'validate'
      description: 'Defines the validate stage. This stage includes the `fmt` and `validate` jobs.'
    stage_test:
      default: 'test'
      description: 'Defines the test stage. This stage includes the `test` job.'
    stage_build:
      default: 'build'
      description: 'Defines the build stage. This stage includes the `plan` job.'
    stage_deploy:
      default: 'deploy'
      description: 'Defines the deploy stage. This stage includes the `apply` job.'
    stage_cleanup:
      default: 'cleanup'
      description: 'Defines the cleanup stage. This stage includes the `destroy` and `delete-state` jobs.'

    # Versions
    # This version is only required, because we cannot access the context of the component,
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/438275
    version:
      default: 'latest'
      description: 'Version of this component. Has to be the same as the one in the component include entry.'

    base_os:
      default: 'alpine'
      options:
        - 'alpine'
        - 'debian'
        - '$GITLAB_OPENTOFU_BASE_IMAGE_OS'
      description: 'Base OS of GitLab OpenTofu image.'

    opentofu_version:
      default: '1.9.0'
      options:
        - '1.9.0'
        - '1.8.8'
        - '1.7.7'
        - '1.6.3'
        - '$OPENTOFU_VERSION'
      description: 'OpenTofu version that should be used.'

    # Images
    image_registry_base:
      default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu'
      description: 'Host URI to the job images. Will be combined with `image_name` to construct the actual image URI.'
    # FIXME: not yet possible because of https://gitlab.com/gitlab-org/gitlab/-/issues/438722
    # gitlab_opentofu_image:
    #   # FIXME: This should reference the component tag that is used.
    #   #        Currently, blocked by https://gitlab.com/gitlab-org/gitlab/-/issues/438275
    #   # default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:$[[ inputs.opentofu_version ]]'
    #   default: '$CI_TEMPLATE_REGISTRY_HOST/components/opentofu/gitlab-opentofu:$[[ inputs.version ]]-opentofu$[[ inputs.opentofu_version ]]'
    #   description: 'Tag of the gitlab-opentofu image.'

    image_name:
      default: 'gitlab-opentofu'
      description: 'Image name for the job images. Hosted under `image_registry_base`.'

    image_digest:
      default: ''
      # FIXME: we cannot use regex yet because of a bug that rejects
      # empty strings from ever being checked against the regex.
      # see https://gitlab.com/gitlab-org/gitlab/-/issues/477707
      # regex: '^(@sha256:[a-z0-9]{64})?$'
      description: 'Image digest of the image you want to use. The format must be `@<image_digest>`, e.g. `@sha256:abc..`, see regex of this input. Please consult the release page at https://gitlab.com/components/opentofu/-/releases to obtain the image digests.'

    # Configuration
    job_name_prefix:
      default: ''
      description: 'Prefix for all job names. Jobs will be hidden if leading with a dot `.`.'
    root_dir:
      default: ${CI_PROJECT_DIR}
      description: 'Root directory for the OpenTofu project.'
    state_name:
      default: default
      description: 'Remote OpenTofu state name.'
    plan_name:
      default: 'plan'
      description: 'The name of the plan cache and plan json file.'
    # FIXME: at the moment we cannot support this input
    # because we cannot nest inputs: https://gitlab.com/gitlab-org/gitlab/-/issues/438722
    # If you want to auto apply, please refer to the `rules` input.
    #auto_apply:
    #  default: false
    #  type: boolean
    #  description: 'Whether the apply job is manual or automatically run.'
    # FIXME: at the moment we cannot support this input
    # because we cannot nest inputs: https://gitlab.com/gitlab-org/gitlab/-/issues/438722
    # If you want to auto destroy, please refer to the `rules` input.
    #auto_destroy:
    #  default: false
    #  type: boolean
    #  description: 'Whether the destroy job is manual or automatically run.'
    plan_artifacts_access:
      default: 'none'
      description: 'Access level for the plan artifact. See https://docs.gitlab.com/ee/ci/yaml/#artifactsaccess for possible values.'
    var_file:
      default: ''
      type: string
      description: 'Path to a variables files relative to root_dir.'
    fmt_rules:
      default:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        # FIXME: once https://gitlab.com/gitlab-org/gitlab/-/issues/438722 is fixed we should only
        # match "parent_pipeline" source if $[[ inputs.trigger_in_child_pipeline ]] is `true`.
        - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
        - if: $CI_OPEN_MERGE_REQUESTS  # Don't add it to a *branch* pipeline if it's already in a merge request pipeline.
          when: never
        - if: $CI_COMMIT_BRANCH        # If there's no open merge request, add it to a *branch* pipeline instead.
      type: array
      description: 'Defines the `rules` of the `fmt` job.'
    validate_rules:
      default:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        # FIXME: once https://gitlab.com/gitlab-org/gitlab/-/issues/438722 is fixed we should only
        # match "parent_pipeline" source if $[[ inputs.trigger_in_child_pipeline ]] is `true`.
        - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
        - if: $CI_OPEN_MERGE_REQUESTS  # Don't add it to a *branch* pipeline if it's already in a merge request pipeline.
          when: never
        - if: $CI_COMMIT_BRANCH        # If there's no open merge request, add it to a *branch* pipeline instead.
      type: array
      description: 'Defines the `rules` of the `validate` job.'
    test_rules:
      default:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        # FIXME: once https://gitlab.com/gitlab-org/gitlab/-/issues/438722 is fixed we should only
        # match "parent_pipeline" source if $[[ inputs.trigger_in_child_pipeline ]] is `true`.
        - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
        - if: $CI_OPEN_MERGE_REQUESTS  # Don't add it to a *branch* pipeline if it's already in a merge request pipeline.
          when: never
        - if: $CI_COMMIT_BRANCH        # If there's no open merge request, add it to a *branch* pipeline instead.
      type: array
      description: 'Defines the `rules` of the `test` job.'
    plan_rules:
      default:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        # FIXME: once https://gitlab.com/gitlab-org/gitlab/-/issues/438722 is fixed we should only
        # match "parent_pipeline" source if $[[ inputs.trigger_in_child_pipeline ]] is `true`.
        - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
        - if: $CI_OPEN_MERGE_REQUESTS  # Don't add it to a *branch* pipeline if it's already in a merge request pipeline.
          when: never
        - if: $CI_COMMIT_BRANCH        # If there's no open merge request, add it to a *branch* pipeline instead.
      type: array
      description: 'Defines the `rules` of the `plan` job.'
    apply_rules:
      default:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: manual
      type: array
      description: 'Defines the `rules` of the `apply` job.'
    destroy_rules:
      default:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: manual
      type: array
      description: 'Defines the `rules` of the `destroy` job.'
    delete_state_rules:
      default:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: manual
      type: array
      description: 'Defines the `rules` of the `delete-state` job.'
    warning_on_non_empty_plan:
      default: false
      type: boolean
      description: 'Whether to mark the job with a warning if the plan contains a diff.'
    trigger_in_child_pipeline:
      default: false
      type: boolean
      description: 'Whether to run all the jobs in a child pipeline.'
    child_pipeline_name:
      default: opentofu
      type: string
      description: 'If `trigger_in_child_pipeline` is `true` then this defines the name of the child pipeline bridge job.'
    child_pipeline_stage:
      default: opentofu
      type: string
      description: 'If `trigger_in_child_pipeline` is `true` then this defines the stage of the child pipeline bridge job.'
    child_pipeline_rules:
      default: [{when: on_success}]
      type: array
      description: 'Defines the `rules` of the child pipeline bridge job.'
    auto_encryption:
      default: false
      type: boolean
      description: 'Whether to enable automatic state and plan encryption.'
    auto_encryption_passphrase:
      default: ''
      type: string
      description: 'Defines the passphrase to auto encrypt the state and plan. Only used if `auto_encryption` is `true`.'
    auto_encryption_enable_migration_from_unencrypted:
      default: false
      type: boolean
      description: 'Whether to setup automatic state and plan encryption for currently unencrypted state. This is only temporarily useful when migrating from an unencrypted state.'
    allow_developer_role_to_plan:
      default: false
      type: boolean
      description: 'Users with the Developer role are not able to lock the state. Thus a regular `tofu plan` fails. When set to `true` a `-lock=false` is passed to plan.'

---

include:
  - local: '/templates/fmt.yml'
    rules:
      - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "false"'
    inputs:
      as: '$[[ inputs.job_name_prefix ]]fmt'
      stage: $[[ inputs.stage_validate ]]
      version: $[[ inputs.version ]]
      base_os: $[[ inputs.base_os ]]
      opentofu_version: $[[ inputs.opentofu_version ]]
      image_registry_base: $[[ inputs.image_registry_base ]]
      image_name: $[[ inputs.image_name ]]
      image_digest: $[[ inputs.image_digest ]]
      root_dir: $[[ inputs.root_dir ]]
      needs: []
      rules: $[[ inputs.fmt_rules ]]
  - local: '/templates/validate.yml'
    rules:
      - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "false"'
    inputs:
      as: '$[[ inputs.job_name_prefix ]]validate'
      stage: $[[ inputs.stage_validate ]]
      version: $[[ inputs.version ]]
      base_os: $[[ inputs.base_os ]]
      opentofu_version: $[[ inputs.opentofu_version ]]
      image_registry_base: $[[ inputs.image_registry_base ]]
      image_name: $[[ inputs.image_name ]]
      image_digest: $[[ inputs.image_digest ]]
      root_dir: $[[ inputs.root_dir ]]
      state_name: $[[ inputs.state_name ]]
      var_file: $[[ inputs.var_file ]]
      rules: $[[ inputs.validate_rules ]]
      auto_encryption: $[[ inputs.auto_encryption ]]
      auto_encryption_passphrase: $[[ inputs.auto_encryption_passphrase ]]
      auto_encryption_enable_migration_from_unencrypted: $[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]
  - local: '/templates/test.yml'
    rules:
      - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "true"'
        when: never
      - exists:
          - $[[ inputs.root_dir ]]/**/*.tftest.hcl
    inputs:
      as: '$[[ inputs.job_name_prefix ]]test'
      stage: $[[ inputs.stage_test ]]
      version: $[[ inputs.version ]]
      base_os: $[[ inputs.base_os ]]
      opentofu_version: $[[ inputs.opentofu_version ]]
      image_registry_base: $[[ inputs.image_registry_base ]]
      image_name: $[[ inputs.image_name ]]
      image_digest: $[[ inputs.image_digest ]]
      root_dir: $[[ inputs.root_dir ]]
      state_name: $[[ inputs.state_name ]]
      var_file: $[[ inputs.var_file ]]
      needs: []
      rules: $[[ inputs.test_rules ]]
      auto_encryption: $[[ inputs.auto_encryption ]]
      auto_encryption_passphrase: $[[ inputs.auto_encryption_passphrase ]]
      auto_encryption_enable_migration_from_unencrypted: $[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]
  - local: '/templates/plan.yml'
    rules:
      - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "false"'
    inputs:
      as: '$[[ inputs.job_name_prefix ]]plan'
      stage: $[[ inputs.stage_build ]]
      version: $[[ inputs.version ]]
      base_os: $[[ inputs.base_os ]]
      opentofu_version: $[[ inputs.opentofu_version ]]
      image_registry_base: $[[ inputs.image_registry_base ]]
      image_name: $[[ inputs.image_name ]]
      image_digest: $[[ inputs.image_digest ]]
      root_dir: $[[ inputs.root_dir ]]
      state_name: $[[ inputs.state_name ]]
      plan_name: $[[ inputs.plan_name ]]
      artifacts_access: $[[ inputs.plan_artifacts_access ]]
      var_file: $[[ inputs.var_file ]]
      rules: $[[ inputs.plan_rules ]]
      warning_on_non_empty_plan: $[[ inputs.warning_on_non_empty_plan ]]
      auto_encryption: $[[ inputs.auto_encryption ]]
      auto_encryption_passphrase: $[[ inputs.auto_encryption_passphrase ]]
      auto_encryption_enable_migration_from_unencrypted: $[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]
      allow_developer_role: $[[ inputs.allow_developer_role_to_plan ]]
  - local: '/templates/apply.yml'
    rules:
      - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "false"'
    inputs:
      as: '$[[ inputs.job_name_prefix ]]apply'
      stage: $[[ inputs.stage_deploy ]]
      version: $[[ inputs.version ]]
      base_os: $[[ inputs.base_os ]]
      opentofu_version: $[[ inputs.opentofu_version ]]
      image_registry_base: $[[ inputs.image_registry_base ]]
      image_name: $[[ inputs.image_name ]]
      image_digest: $[[ inputs.image_digest ]]
      root_dir: $[[ inputs.root_dir ]]
      state_name: $[[ inputs.state_name ]]
      plan_name: $[[ inputs.plan_name ]]
      var_file: $[[ inputs.var_file ]]
      rules: $[[ inputs.apply_rules ]]
      auto_encryption: $[[ inputs.auto_encryption ]]
      auto_encryption_passphrase: $[[ inputs.auto_encryption_passphrase ]]
      auto_encryption_enable_migration_from_unencrypted: $[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]
  - local: '/templates/destroy.yml'
    rules:
      - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "false"'
    inputs:
      as: '$[[ inputs.job_name_prefix ]]destroy'
      stage: $[[ inputs.stage_cleanup ]]
      version: $[[ inputs.version ]]
      base_os: $[[ inputs.base_os ]]
      opentofu_version: $[[ inputs.opentofu_version ]]
      image_registry_base: $[[ inputs.image_registry_base ]]
      image_name: $[[ inputs.image_name ]]
      image_digest: $[[ inputs.image_digest ]]
      root_dir: $[[ inputs.root_dir ]]
      state_name: $[[ inputs.state_name ]]
      var_file: $[[ inputs.var_file ]]
      rules: $[[ inputs.destroy_rules ]]
      auto_encryption: $[[ inputs.auto_encryption ]]
      auto_encryption_passphrase: $[[ inputs.auto_encryption_passphrase ]]
      auto_encryption_enable_migration_from_unencrypted: $[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]
  - local: '/templates/delete-state.yml'
    rules:
      - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "false"'
    inputs:
      as: '$[[ inputs.job_name_prefix ]]delete-state'
      stage: $[[ inputs.stage_cleanup ]]
      state_name: $[[ inputs.state_name ]]
      rules: $[[ inputs.delete_state_rules ]]

# FIXME: eventually, we'll have a `needs` input on the `delete-state`
# job template, but the issue is that we cannot default it to something
# meaningful other than `null` - but `null` is also not yet supported, see
# https://gitlab.com/gitlab-org/gitlab/-/issues/440468
'.$[[ inputs.job_name_prefix ]]delete-state:dummy:true':
  stage: .pre
  script: 'false'
  rules: [{when: never}]

'.$[[ inputs.job_name_prefix ]]delete-state:dummy:false':
  needs: ['$[[ inputs.job_name_prefix ]]destroy']
  rules: $[[ inputs.delete_state_rules ]]

'$[[ inputs.job_name_prefix ]]delete-state':
  extends: '.$[[ inputs.job_name_prefix ]]delete-state:dummy:$[[ inputs.trigger_in_child_pipeline ]]'


# NOTE: the following configuration is only used if `trigger_in_child_pipeline` is enabled.
stages:
  - $[[ inputs.stage_validate ]]
  - $[[ inputs.stage_test ]]
  - $[[ inputs.stage_build ]]
  - $[[ inputs.stage_deploy ]]
  - $[[ inputs.stage_cleanup ]]
  - $[[ inputs.child_pipeline_stage ]]

'.$[[ inputs.job_name_prefix ]]$[[ inputs.child_pipeline_name ]]:bridge_job_stage:true':
  stage: $[[ inputs.child_pipeline_stage ]]

'.$[[ inputs.job_name_prefix ]]$[[ inputs.child_pipeline_name ]]:bridge_job_stage:false':
  # NOTE: this is a hack for the bridge job below to have a valid stage even if it isn't used.
  # The thing is that the stage needs to be defined even if the job is "ruled" out and not created.
  # The .pre stage always exists.
  stage: .pre

'$[[ inputs.job_name_prefix ]]$[[ inputs.child_pipeline_name ]]':
  rules:
    - if: '"$[[ inputs.trigger_in_child_pipeline ]]" == "false"'
      when: never
    - $[[ inputs.child_pipeline_rules ]]
  extends: '.$[[ inputs.job_name_prefix ]]$[[ inputs.child_pipeline_name ]]:bridge_job_stage:$[[ inputs.trigger_in_child_pipeline ]]'
  trigger:
    include:
      # FIXME: this project path may not be correct for forks and mirrors (on self-managed),
      # so we need to introduce another input for it.
      # We probably need to split up `image_registry_base` and use parts of it here, too.
      - project: 'components/opentofu'
        file: '/templates/full-pipeline.yml'
        ref: '$[[ inputs.version ]]'
        inputs:
          stage_validate: $[[ inputs.stage_validate ]]
          stage_test: $[[ inputs.stage_test ]]
          stage_build: $[[ inputs.stage_build ]]
          stage_deploy: $[[ inputs.stage_deploy ]]
          stage_cleanup: $[[ inputs.stage_cleanup ]]
          version: $[[ inputs.version ]]
          base_os: $[[ inputs.base_os ]]
          opentofu_version: $[[ inputs.opentofu_version ]]
          image_registry_base: $[[ inputs.image_registry_base ]]
          image_name: $[[ inputs.image_name]]
          image_digest: $[[ inputs.image_digest]]
          job_name_prefix: $[[ inputs.job_name_prefix]]
          root_dir: $[[ inputs.root_dir]]
          state_name: $[[ inputs.state_name]]
          plan_name: $[[ inputs.plan_name ]]
          plan_artifacts_access: $[[ inputs.plan_artifacts_access ]]
          var_file: $[[ inputs.var_file ]]
          fmt_rules: $[[ inputs.fmt_rules ]]
          validate_rules: $[[ inputs.validate_rules ]]
          plan_rules: $[[ inputs.plan_rules ]]
          apply_rules: $[[ inputs.apply_rules ]]
          destroy_rules: $[[ inputs.destroy_rules ]]
          delete_state_rules: $[[ inputs.delete_state_rules ]]
          warning_on_non_empty_plan: $[[ inputs.warning_on_non_empty_plan ]]
          auto_encryption: $[[ inputs.auto_encryption ]]
          auto_encryption_passphrase: $[[ inputs.auto_encryption_passphrase ]]
          auto_encryption_enable_migration_from_unencrypted: $[[ inputs.auto_encryption_enable_migration_from_unencrypted ]]
          allow_developer_role_to_plan: $[[ inputs.allow_developer_role_to_plan ]]
          trigger_in_child_pipeline: false
    forward:
      yaml_variables: true
      pipeline_variables: true
    strategy: depend
